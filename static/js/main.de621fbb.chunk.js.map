{"version":3,"sources":["serviceWorker.js","components/Profile.js","index.js"],"names":["Boolean","window","location","hostname","match","Profile","_ref","avatar","name","tag","stats","react_default","a","createElement","react","src","alt","class","followers","className","views","likes","defaultProps","user","ReactDOM","render","components_Profile","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IAAMC,EAAU,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAQC,EAAVF,EAAUE,KAAMC,EAAhBH,EAAgBG,IAAKP,EAArBI,EAAqBJ,SAAUQ,EAA/BJ,EAA+BI,MAA/B,OACZC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACAH,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,OAAKE,IAAOR,EAAQS,IAAO,cAAgBC,MAAS,WACnDN,EAAAC,EAAAC,cAAA,aAAKL,GACLG,EAAAC,EAAAC,cAAA,aAAKJ,EAAL,KACAE,EAAAC,EAAAC,cAAA,aAAKX,EAAL,MAEAS,EAAAC,EAAAC,cAAA,MAAII,MAAQ,SACRN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMI,MAAQ,SAAd,cACAN,EAAAC,EAAAC,cAAA,QAAMI,MAAQ,YAAd,IAA2BP,EAAMQ,UAAjC,MAEJP,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SAAhB,WACAR,EAAAC,EAAAC,cAAA,QAAMM,UAAU,YAAhB,IAA6BT,EAAMU,MAAnC,MAEJT,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SAAhB,WACAR,EAAAC,EAAAC,cAAA,QAAMM,UAAU,YAAhB,IAA6BT,EAAMW,MAAnC,SAMhBhB,EAAQiB,aAAe,CACnBd,KAAM,iBAmBKH,QCzCTkB,EAAO,CACTf,KAAM,gBACNC,IAAK,UACLP,SAAU,qBACVK,OACI,iFACJG,MAAO,CACHQ,UAAW,KACXE,MAAO,KACPC,MAAO,OAKfG,IAASC,OACLd,EAAAC,EAAAC,cAACa,EAAD,CACIlB,KAAMe,EAAKf,KACXC,IAAKc,EAAKd,IACVF,OAAQgB,EAAKhB,OACbL,SAAUqB,EAAKrB,SACfQ,MAAOa,EAAKb,QAGhBiB,SAASC,eAAe,SFmGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de621fbb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\n\nconst Profile = ({avatar, name, tag, location, stats }) => (\n    <Fragment>\n    <div>\n       <img src = {avatar} alt = {\"user avatar\" } class = {\"avatar\" } />\n        <p> {name}</p>\n        <p> {tag} </p>\n        <p> {location} </p>\n    </div>\n        <ul class = \"stats\">\n            <li>\n                <span class = \"label\"> Followers</span>\n                <span class = \"quantity\"> {stats.followers} </span>\n            </li>\n            <li>\n                <span className=\"label\"> Views </span>\n                <span className=\"quantity\"> {stats.views} </span>\n            </li>\n            <li>\n                <span className=\"label\"> Likes </span>\n                <span className=\"quantity\"> {stats.likes} </span>\n            </li>\n        </ul>\n    </Fragment>\n);\n\nProfile.defaultProps = {\n    name: 'product image',\n};\n\nProfile.propTypes = {\n    avatar: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    stats: PropTypes.arrayOf(\n        PropTypes.shape(\n            {\n             followers: PropTypes.number.isRequired,\n             views: PropTypes.number.isRequired,\n             likes: PropTypes.number.isRequired,\n            }),\n    ).isRequired,\n\n};\n\nexport default Profile;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Profile from '../src/components/Profile';\n\nconst user = {\n    name: 'Jacques Gluke',\n    tag: '@jgluke',\n    location: 'Ocho Rios, Jamaica',\n    avatar:\n        'http://okcolab.sasquatchstudio.co/wp-content/uploads/2017/05/avatar-sample.jpg',\n    stats: {\n        followers: 5603,\n        views: 4827,\n        likes: 1308,\n    },\n};\n\n\nReactDOM.render(\n    <Profile\n        name={user.name}\n        tag={user.tag}\n        avatar={user.avatar}\n        location={user.location}\n        stats={user.stats}\n\n    />,\n    document.getElementById('root'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}